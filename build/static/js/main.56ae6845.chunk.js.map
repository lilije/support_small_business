{"version":3,"sources":["services/services.js","redux/actions/actions.js","redux/reducers/reducers.js","redux/store/store.js","CreatePage/CreatePage.jsx","services/lib.js","Footer/Footer.jsx","Header/Header.jsx","Main/ImageDisplay/ImageDisplay.jsx","Main/LogIn/LogIn.jsx","Main/LogOut/LogOut.jsx","Main/PostList/Post/Post.jsx","Main/PostList/PostList.jsx","Main/Main.jsx","HomePage/HomePage.js","App/App.js","serviceWorker.js","index.js"],"names":["transformNetworkError","err","Promise","reject","code","rejectJsonError","response","json","then","addNewPost","instruction","imagePath","newPost","dispatch","post","fetch","method","headers","body","JSON","stringify","catch","ok","type","appendPost","console","log","addUser","username","Headers","login","logInUser","logOut","fetchPosts","posts","results","receivePosts","initialState","selectedPost","id","author","couponCode","rootReducer","state","action","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","withRouter","useState","setImagePath","setInstruction","setErr","history","useHistory","useDispatch","className","to","style","textDecoration","onSubmit","e","preventDefault","uri","parts","split","extension","length","indexOf","isUriImage","push","htmlFor","name","placeholder","onChange","event","target","value","Footer","Header","ImageDisplay","useSelector","store","src","alt","LogIn","setUsername","match","verfiyUsername","LogOut","Post","props","onClick","PostList","Object","keys","map","key","Main","useEffect","HomePage","App","path","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.56ae6845.chunk.js","sourcesContent":["const transformNetworkError = (err) => Promise.reject({\r\n  code: 'network-issue',\r\n  err\r\n});\r\n\r\nconst rejectJsonError = (response) => {\r\n  return response.json()\r\n  .then(err => Promise.reject(err));\r\n};\r\n\r\nexport const login = (username) => {\r\n  return fetch('/session', {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n    'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({ username }),\r\n  })\r\n  .catch(transformNetworkError)\r\n  .then(response => {\r\n    if (!response.ok) {\r\n    return rejectJsonError(response);\r\n    }\r\n    return;\r\n  });\r\n};\r\n\r\nexport const logout = () => {\r\n  return fetch('/logout', {\r\n    method: 'POST',\r\n  })\r\n  .catch(transformNetworkError)\r\n  .then(response => {\r\n    if (!response.ok) {\r\n    return rejectJsonError(response);\r\n    }\r\n    return;\r\n  });\r\n}\r\n\r\nexport const fetchLists = () => {\r\n  return fetch('/posts', {\r\n    method: 'GET',\r\n  })\r\n  .catch(transformNetworkError)\r\n  .then(response => {\r\n    if (!response.ok) {\r\n    return rejectJsonError(response);\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const addPost = (post) => {\r\n  return fetch('/posts', {\r\n    method: 'POST',\r\n    headers: { \r\n      \"Content-type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n      imagePath: post.imagePath,\r\n      instruction: post.instruction,\r\n    })\r\n  })\r\n    .catch(transformNetworkError)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        return rejectJsonError(response);\r\n      }\r\n      return response.json();\r\n    });\r\n}","import { addPost, fetchLists, login, logout } from '../../services/services';\n\nexport const ADD_POST = 'ADD_POST';\nexport const ADD_USER = 'ADD_USER';\nexport const CHANGE_POST = 'CHANGE_POST';\nexport const FETCH_POSTS = 'FETCH_POSTS';\nexport const LOG_OUT = 'LOG_OUT';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\n\nexport const appendPost = (post) => {\n  return {\n    type: ADD_POST,\n    post\n  }\n}\n\nexport const changeSelectedPost = (post) => {\n  return {\n    type: CHANGE_POST,\n    post\n  }\n}\n\nexport const logInUser = (username) => {\n  return {\n    type: ADD_USER,\n    username\n  }\n}\n\nexport const logOutUser = () => {\n  return { type: LOG_OUT }\n}\n\nexport const receivePosts = (posts) => {\n  return {\n    type: RECEIVE_POSTS,\n    posts\n  };\n}\n\nexport const addNewPost = (instruction, imagePath) => {\n  const newPost = { instruction, imagePath };\n  \n  return (dispatch) => {\n    return addPost(newPost)\n      .then(post => { dispatch(appendPost(post)); })\n      .catch((err) => { console.log(err.code); });\n  }\n}\n\nexport const addUser = (username) => {\n  return (dispatch) => {\n    return login(username)\n      .then(() => { dispatch(logInUser(username)); })\n      .catch((err) => { console.log(err.code); });\n  }\n}\n\nexport const logOut = () => {\n  return (dispatch) => {\n    return logout()\n      .then(() => { dispatch(logOutUser()) })\n      .catch((err) => { console.log(err.code); });\n  }\n}\n\nexport const fetchPosts = () => {\n  let posts = [];\n  \n  return (dispatch) => {\n    return fetchLists()\n      .then(results => {\n        posts = results.posts;\n        dispatch(receivePosts(posts));\n      })\n      .catch((err) => { console.log(err.code); });\n  }\n}","import { ADD_POST, CHANGE_POST, ADD_USER, LOG_OUT, RECEIVE_POSTS } from '../actions/actions';\n\nconst initialState = {\n  posts:[],\n  selectedPost: {\n    id: \"001\",\n    author: \"Cafe De Casa\",\n    couponCode: 'FR6bwx1q',\n    imagePath: \"https://images.pexels.com/photos/6267/menu-restaurant-vintage-table.jpg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n    instruction: \"Your coupon value is $5.\"\n  },\n  username: null\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case ADD_POST:\n        return {\n          posts: [\n            ...state.posts,\n            action.post\n          ],\n          selectedPost: state.selectedPost,\n          username: state.username\n        }\n      case CHANGE_POST:\n        return {\n          posts: [...state.posts],\n          selectedPost: action.post,\n          username: state.username\n        }\n      case ADD_USER:\n        return {\n          posts: [...state.posts],\n          selectedPost: state.selectedPost,\n          username: action.username\n        }\n      case LOG_OUT:\n        return {\n          posts: [...state.posts],\n          selectedPost: state.selectedPost,\n          username: null\n        }\n      case RECEIVE_POSTS:\n        return {\n          posts: [ ...action.posts ],\n          selectedPost: state.selectedPost,\n          username: state.username\n        }\n      default:\n        return state;\n    }\n}\n\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers/reducers';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(\n  rootReducer,\n  composeEnhancer(applyMiddleware(thunk))\n);","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\n\nimport { addNewPost } from '../redux/actions/actions';\nimport { isUriImage } from '../services/lib'\n\nimport './CreatePage.css';\n\nconst CreatePage = () => {\n  const [imagePath, setImagePath] = useState('');\n  const [instruction, setInstruction] = useState('');\n  const [err, setErr] = useState('');\n \n  const history = useHistory();\n\n  const dispatch = useDispatch();\n    \n  const handleImagePathChange = (event) => {\n    setErr('');\n    setImagePath(event.target.value);\n  }\n  \n  const handleInstructionChange = (event) => { setInstruction(event.target.value); }\n  \n  const handleCreateNewPost = (e) => {\n    e.preventDefault();\n        \n    if (!isUriImage(imagePath)) {\n      setErr('please input a valid image address');\n      return;\n    }\n    dispatch(addNewPost(instruction, imagePath));\n    history.push('/');\n  }\n  \n  return (\n    <div className=\"new-post\">\n      \n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\n        <p className=\"go-back\">Go Back to Home Page</p>\n      </Link>\n      \n      <h2>Create New Post</h2>\n      \n      <form onSubmit={handleCreateNewPost}>\n        <label htmlFor=\"image\">Image</label>\n        <input type=\"text\" id=\"image\" name=\"image\" placeholder=\"put your image link e.g. https://images.pexels.com/photos/6267/menu-restaurant-vintage-table.jpg\" \n          onChange={handleImagePathChange} />\n        {err && <p>{err}</p>}\n\n        <label htmlFor=\"instruction\">Coupon Value</label>\n        <textarea id=\"instruction\" name=\"instruction\" placeholder=\"please input your coupon value and instruction..\" onChange={handleInstructionChange} />\n        \n        <input type=\"submit\" value=\"Submit\" className=\"submit\" />\n      </form>\n    </div>\n  )\n}\n\nexport default withRouter(CreatePage);","export const isUriImage = (uri)  => {\n  //make sure we remove any nasty GET params \n  uri = uri.split('?')[0];\n  //moving on, split the uri into parts that had dots before them\n  var parts = uri.split('.');\n  //get the last part ( should be the extension )\n  var extension = parts[parts.length-1];\n  //define some image types to test against\n  var imageTypes = ['jpg','jpeg','tiff','png','gif','bmp'];\n  //check if the extension matches anything in the list.\n  return imageTypes.indexOf(extension) !== -1;\n}\n\nexport const verfiyUsername = (username) => {\n  return username.match(/dog|\\s/g);\n}","import React from 'react';\n\nimport './Footer.css';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>NEU Student: Zhong Liu</p>\n    </footer>\n  )\n}\n\nexport default Footer;","import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Coupons</h1>\n      <span>Support Small Businesses</span>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './ImageDisplay.css';\n\nconst ImageDisplay = () => {\n  const selectedPost = useSelector(store => store.selectedPost);\n  \n  return (\n    <div className='image-display'>\n      <img src={selectedPost.imagePath} alt=\"popular\" />\n      <div className=\"detail\">\n        <p>{selectedPost.author}</p>\n        <p><span>Coupon Code</span> : {selectedPost.couponCode}</p>\n        <p><span>Instruction</span> : {selectedPost.instruction}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default ImageDisplay;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { verfiyUsername } from '../../services/lib';\nimport { addUser } from '../../redux/actions/actions';\n\nimport './LogIn.css';\n\nconst LogIn = () => {\n  const [username, setUsername] = useState('');\n  const [err, setErr] = useState('');\n\n  const dispatch = useDispatch();\n  \n  const myChangeHandler = (event) => {\n    setErr('');\n    setUsername(event.target.value);\n  }\n  \n  const handleLogIn = (e) => {\n    e.preventDefault();\n    verfiyUsername(username) ? setErr('Please input valid username') : setErr('');\n    dispatch(addUser(username));\n  }\n  \n  return (\n    <form className=\"login-form\" onSubmit={handleLogIn}>\n      <input type=\"text\" className=\"user-name\" placeholder=\"Your business name e.g. In-N-Out Burger\" onChange={myChangeHandler} />\n      <button className=\"user-login\" type=\"submit\">Business Login</button>\n      {err && <p>{err}</p>}\n    </form>\n  )\n}\n\nexport default LogIn;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from \"react-router-dom\";\n\nimport { logOut } from '../../redux/actions/actions';\n\nimport './LogOut.css';\n\nconst LogOut = () => {\n  const dispatch = useDispatch();\n  const username = useSelector(store => store.username);\n\n  const handleLogOut = (e) => {\n    e.preventDefault();\n    dispatch(logOut());\n  }\n\n  return (\n    <form className=\"logout-form\" onSubmit={handleLogOut}>\n      <span>Hi, {username}</span>\n      <Link to=\"/createPage\">\n        <button className=\"user-create\">Create New Post</button>\n      </Link>\n      <button className=\"user-logout\" type=\"submit\">Log Out</button>\n    </form>\n  )\n}\n\nexport default LogOut;","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { changeSelectedPost } from '../../../redux/actions/actions';\n\nimport './Post.css';\n\nconst Post = (props) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li onClick={() => dispatch(changeSelectedPost(props.post))}> {props.post.author} </li>\n  )\n}\n\nexport default Post;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Post from './Post/Post';\n\nimport './PostList.css';\n\nconst PostList = () => {\n  const posts = useSelector(store => store.posts);\n\n  return (\n    <div className=\"list\">\n      <h2>Small Businesses</h2>\n      <ul>\n       {Object.keys(posts).map((key) =>\n        <Post\n          key={key}\n          id={key}\n          post={posts[key]}\n        />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default PostList;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchPosts } from '../redux/actions/actions';\n\nimport ImageDisplay from './ImageDisplay/ImageDisplay';\nimport LogIn from './LogIn/LogIn';\nimport LogOut from './LogOut/LogOut';\nimport PostList from './PostList/PostList';\n\nimport './Main.css';\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const username = useSelector(store => store.username);\n  \n  useEffect(() => {\n    dispatch(fetchPosts());\n  })\n\n  return (\n    <main>\n      <div className=\"first-row\">\n        {username ? <LogOut /> : <LogIn />}\n      </div>\n      <div className=\"main-row\">\n        <PostList />\n        <ImageDisplay />\n      </div>\n    </main>\n  )\n}\n\nexport default Main;","import React from 'react';\n\nimport Main from '../Main/Main';\n\nimport './HomePage.css';\n\nconst HomePage = () => {\n  return (\n    <div className=\"HomePage\">\n      <Main />\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport CreatePage from '../CreatePage/CreatePage';\nimport Footer from '../Footer/Footer';\nimport Header from '../Header/Header';\nimport HomePage from '../HomePage/HomePage';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/homePage\">\n          <HomePage />\n        </Route>\n        <Route path=\"/createPage\">\n          <CreatePage />\n        </Route>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store/store';\n\nimport './index.css';\n\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}